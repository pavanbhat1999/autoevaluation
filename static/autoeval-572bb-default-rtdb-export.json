{
  "answers": {
    "-L7mptYdYLpLWiO5hVFF": {
      "email": "pavan@gmail.com",
      "result1": 1.5,
      "result2": 1.5,
      "result3": 1.5
    },
    "-L7nCORktMYomi0h54NT": {
      "email": "raghu18@gmail.com",
      "result1": 1.5,
      "result2": 1.0,
      "result3": 1.5
    },
    "-L7n_2OhUV22f2E0YdI4": {
      "email": "chandana@gmail.com",
      "result1": 1.5,
      "result2": 1.5,
      "result3": 2.0
    },
    "-L8a2wa_D6rYf0CCOqT6": {
      "email": "IamL@gmail.com",
      "result1": 2.5,
      "result2": 1.5,
      "result3": 2.0
    },
    "-L8kFET3KTx7T83uroro": {
      "email": "srishti@gmail.com",
      "result1": 0,
      "result2": 1.5,
      "result3": 1.5
    },
    "-L8kX_xGFBzFl8TKHumx": {
      "email": "patrickjane@gmail.com",
      "result1": 0,
      "result2": 2.0,
      "result3": 2.0
    },
    "-M1v2L6qlWblZ2O8fDMi": {
      "email": "hari@gmail.com",
      "result1": 1.5,
      "result2": 1.5,
      "result3": 1.5
    },
    "-MA0us9VTa6A3fPf7fFn": {
      "email": "test@t.com",
      "result1": 0,
      "result2": 2.0,
      "result3": 2.0
    },
    "-MA74tvPnBn5A1D3CvOP": {
      "email": "test@tg.com",
      "result1": 0,
      "result2": 2.0,
      "result3": 2.0
    },
    "-MBU-TNSnJCrqW-17sbE": {
      "email": "app@app.com",
      "result1": 0,
      "result2": 1.5,
      "result3": 0
    }
  },
  "answers1": {
    "-L7mptYdYLpLWiO5hVFF": {
      "a1": "Defined as wrapping of data under a single unit.",
      "a2": "Asymptotic notation are used to analyze an algorithm. Types are big omega big theta.",
      "a3": "Ability to take more than one form. Types static and dynamic",
      "email": "pavan@gmail.com"
    },
    "-L7nCORktMYomi0h54NT": {
      "a1": "Encapsulation is wrapping data in a single unit.",
      "a2": "Asymptomatic notations are the measures used to describe complexity of algorithm.",
      "a3": "Polymorphism is the property of having one  thing many forms.",
      "email": "raghu18@gmail.com"
    },
    "-L7n_2OhUV22f2E0YdI4": {
      "a1": "Abstraction is a process where you show only “relevant” data and “hide” unnecessary details of an object from the user. Encapsulation is the process of combining data and functions into a single unit called class. In Encapsulation, the data is not accessed directly; it is accessed through the functions present inside the class.",
      "a2": "Asymptotic Notations are languages that allow us to analyze an algorithm’s running time by identifying its behavior as the input size for the algorithm increases. This is also known as an algorithm’s growth rate.\r\nTheta Notation: The theta notation bounds a functions from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants. For example, consider the following expression.\r\n3n3 + 6n2 + 6000 = Θ(n3) \r\n\r\nBig O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above.\r\nThe Big O notation is useful when we only have upper bound on time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm.\r\n\r\nΩ Notation: Just as Big O notation provides an asymptotic upper bound on a function, Ω notation provides an asymptotic lower bound. Ω Notation  can be useful when we have lower bound on time complexity of an algorithm",
      "a3": "In object-oriented programming, polymorphism \"having multiple forms\"  is the characteristic of being able to assign a different meaning or usage to something in different contexts - specifically, to allow an entity such as a variable, a function, or an object to have more than one form. There are several different kinds of polymorphism.",
      "email": "chandana@gmail.com"
    },
    "-L8a2wa_D6rYf0CCOqT6": {
      "a1": ", encapsulation is used to refer to one of two related but distinct notions, and sometimes to the combination thereof: A language mechanism for restricting direct access to some of the object's components.",
      "a2": "Asymptotic Notations are languages that allow us to analyze an algorithm's running time by identifying its behavior as the input size for the algorithm increases. This is also known as an algorithm's growth rate.",
      "a3": "In programming languages and type theory, polymorphism is the provision of a single interface to entities of different types. A polymorphic type is one whose operations can also be applied to values of some other type, or types",
      "email": "IamL@gmail.com"
    },
    "-L8kFET3KTx7T83uroro": {
      "a1": "Data hinding and abstraction ",
      "a2": "Asymptotic notation are used to evaluate the complexity of the program in terms of input size\r\n1.Big o\r\n2. Sigma\r\n3.theta",
      "a3": "Poly means many and morphism means form . polymorphism is the basically same name but different working\r\n1.runtime\r\n2.compiletime",
      "email": "srishti@gmail.com"
    },
    "-L8kX_xGFBzFl8TKHumx": {
      "a1": "a",
      "a2": "They are mechanism to interpret the running time of algorithms depending on the input size. They can be big oh notation, omega notation or theta notation.",
      "a3": "Polymorphism is a OOPS concept where an object can take various forms. Polymorphism is used when a parent class reference is used to refer a child class object. Its types are:\r\n1. compile time \r\n2. run time",
      "email": "patrickjane@gmail.com"
    },
    "-M1v2L6qlWblZ2O8fDMi": {
      "a1": "Defined as wrapping of data under a single unit.",
      "a2": "Asymptotic notation are used to analyze an algorithm. Types are big omega big theta.",
      "a3": "Ability to take more than one form. Types static and dynamic.",
      "email": "hari@gmail.com"
    },
    "-MA0us9VTa6A3fPf7fFn": {
      "a1": "Capsulates the data",
      "a2": "They are mechanism to interpret the running time of algorithms depending on the input size. They can be big oh notation, omega notation or theta notation.\r\n\r\nAsymptomatic notations are the measures used to describe complexity of algorithm.\r\n",
      "a3": "Polymorphism is a OOPS concept where an object can take various forms. \r\nPolymorphism is used when a parent class reference is used to refer a child class object.\r\n Its types are:1. compile time 2. run time",
      "email": "test@t.com"
    },
    "-MA74tvPnBn5A1D3CvOP": {
      "a1": "Capsulates the data",
      "a2": "They are mechanism to interpret the running time of algorithms depending on the input size. They can be big oh notation, omega notation or theta notation.\r\n\r\nAsymptomatic notations are the measures used to describe complexity of algorithm.",
      "a3": "Polymorphism is a OOPS concept where an object can take various forms. \r\nPolymorphism is used when a parent class reference is used to refer a child class object.\r\n Its types are:1. compile time 2. run time",
      "email": "test@tg.com"
    },
    "-MBU-TNSnJCrqW-17sbE": {
      "a1": "Data hiding",
      "a2": "Measurement of effectiveness of the code",
      "a3": "one function carries many work",
      "email": "app@app.com"
    }
  },
  "model_answers": [
    null,
    {
      "answer": "Encapsulation is an object-oriented programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse.Data encapsulation led to the important OOP concept of data hiding. If a class does not allow calling code to access internal object data and permits access through methods only, this is a strong form of abstraction or information hiding known as encapsulation. Data encapsulation is a mechanism of bundling the data, and the functions that use them and data abstraction is a mechanism of exposing only the interfaces and hiding the implementation details from the user. Abstraction and encapsulation are complementary concepts: abstraction focuses on the observable behavior of an object. encapsulation focuses upon the implementation that gives rise to this behavior. encapsulation is most often achieved through information hiding, which is the process of hiding all of the secrets of object that do not contribute to its essential characteristics.  Encapsulation is the process of combining data and functions into a single unit called class. In Encapsulation, the data is not accessed directly; it is accessed through the functions present inside the class. In simpler words, attributes of the class are kept private and public getter and setter methods are provided to manipulate these attributes. Thus, encapsulation makes the concept of data hiding possible Abstraction is a process where you show only “relevant” data and “hide” unnecessary details of an object from the user.",
      "keywords": "['binds', 'together', 'relevant data', 'data hiding', 'data hiding', 'abstraction', 'combining data']",
      "out_of": 5
    },
    {
      "answer": "Asymptotic Notations are languages that allow us to analyze an algorithm's running time by identifying its behavior as the input size for the algorithm increases. This is also known as an algorithm's growth rate. Main Types - 1. Big 2.Small 1. Big Notation further divided into three types- 1)Big O 2)Big Omega 3)Big Theta 2. Small Notation further divided into three types- 1)Small o 2)Small Theta",
      "keywords": "['Analysing Algorithm', 'analyse running time','represent time complexity of algorithms','measure the efficiency']",
      "out_of": 5
    },
    {
      "answer": "Polymorphism means to process objects differently based on their data type.     In other words it means, one method with multiple implementation, for a certain class of action. And     which implementation to be used is decided at runtime depending upon the situation (i.e., data type of     the object)     This can be implemented by designing a generic interface, which provides generic methods for a certain     class of action and there can be multiple classes, which provides the implementation of these generic     methods.     In object-oriented programming, polymorphism refers to a programming language&#39;s ability to process     objects differently depending on their data type or class. More specifically, it is the ability to redefine     methods for derived classes. 1) Static Polymorphism also known as compile time polymorphism - Polymorphism that is resolved     during compiler time is known as static polymorphism. Method overloading is an example of compile     time polymorphism.     2) Dynamic Polymorphism also known as runtime polymorphism - It is also known as Dynamic     Method Dispatch. Dynamic polymorphism is a process in which a call to an overridden method is     resolved at runtime, that is why it is called runtime polymorphism.",
      "keywords": "['one name many forms' , 'generic interface', 'implementation', 'runtime', 'same method name', 'same function name']",
      "out_of": 5
    }
  ]
}
